# 🐾 EntrePatitas - Guía Completa de Producción

## Análisis del Proyecto y Roadmap de Deploy

---

## 📋 Índice

1. [Resumen Ejecutivo](#resumen-ejecutivo)
2. [Análisis de Seguridad Crítica](#análisis-de-seguridad-crítica)
3. [Puntos de Mejora por Prioridad](#puntos-de-mejora-por-prioridad)
4. [Guía Paso a Paso - 15 Pasos](#guía-paso-a-paso)
5. [Scripts y Código de Implementación](#scripts-y-código)
6. [Costos y Timeline](#costos-y-timeline)
7. [Checklist Final](#checklist-final)

---

## 1. Resumen Ejecutivo

**EntrePatitas** es un ecommerce para productos de mascotas desarrollado en React con las siguientes características técnicas:

### Stack Tecnológico Actual
- **Frontend:** React 19, Vite, React Router, Bootstrap 5
- **Backend:** Supabase (PostgreSQL)
- **Pagos:** MercadoPago integrado
- **Deploy:** GitHub Pages
- **Estado:** 🔴 En desarrollo - **NO listo para producción**

### Problemas Críticos Identificados
- ❌ **Sin seguridad RLS** en base de datos
- ❌ **Credenciales expuestas** en repositorio
- ❌ **Vulnerabilidades de seguridad** múltiples
- ❌ **Performance no optimizada**

### Tiempo Estimado de Implementación
**2-3 semanas** para deploy seguro en producción

---

## 2. Análisis de Seguridad Crítica

### 🚨 VULNERABILIDADES CRÍTICAS

#### 2.1 Base de Datos Sin Protección
```sql
-- PROBLEMA ACTUAL: Cualquier usuario puede ver/modificar datos
SELECT * FROM productos; -- ✅ Funciona para cualquiera
SELECT * FROM pedidos;   -- ✅ Ve todos los pedidos
```

**Impacto:** Exposición total de datos de clientes y pedidos.

#### 2.2 Credenciales Expuestas
```env
# Archivo .env PÚBLICO en repositorio
VITE_MP_ACCESS_TOKEN=TEST-2897940753735612... # ❌ EXPUESTO
VITE_SUPABASE_KEY=eyJhbGciOiJIUzI1NiIs...    # ❌ VISIBLE
```

**Impacto:** Acceso no autorizado a pagos y base de datos.

#### 2.3 URLs Hardcodeadas de Desarrollo
```javascript
// URLs de cloudflare temporal en producción
VITE_MP_SUCCESS_URL=https://legacy-play-seekers-generates.trycloudflare.com/
```

**Impacto:** URLs pueden caducar, rompiendo funcionalidad.

---

## 3. Puntos de Mejora por Prioridad

### 🔴 ALTA PRIORIDAD (Crítico para producción)

#### 3.1 Seguridad
- [ ] Habilitar RLS en todas las tablas
- [ ] Crear políticas de acceso por usuario
- [ ] Mover credenciales sensibles al backend
- [ ] Implementar autenticación robusta

#### 3.2 Base de Datos
- [ ] Crear índices para performance
- [ ] Implementar triggers de actualización
- [ ] Validaciones de esquema
- [ ] Backup automático

#### 3.3 Infraestructura
- [ ] Migrar de GitHub Pages
- [ ] Dominio personalizado con SSL
- [ ] Edge Functions para webhooks
- [ ] Monitoreo de errores

### 🟡 MEDIA PRIORIDAD (Mejora UX)

#### 3.4 Funcionalidades
- [ ] Sistema de búsqueda y filtros
- [ ] Paginación de productos
- [ ] Favoritos persistentes
- [ ] Gestión de variantes/colores
- [ ] Sistema de reviews

#### 3.5 Performance
- [ ] Lazy loading de componentes
- [ ] Optimización de imágenes
- [ ] Caché de productos
- [ ] Minificación de assets

### 🟢 BAJA PRIORIDAD (Optimización)

#### 3.6 SEO y Marketing
- [ ] Meta tags dinámicos
- [ ] Structured data
- [ ] Sitemap automático
- [ ] Google Analytics
- [ ] Social media cards

---

## 4. Guía Paso a Paso

### FASE 1: SEGURIDAD CRÍTICA (Días 1-3)

#### Paso 1: Configurar Row Level Security (RLS)

**Tiempo estimado:** 2 horas

**Objetivo:** Proteger datos sensibles con políticas de acceso.

```sql
-- 1. Habilitar RLS en tablas críticas
ALTER TABLE productos ENABLE ROW LEVEL SECURITY;
ALTER TABLE pedidos ENABLE ROW LEVEL SECURITY;

-- 2. Política para productos (lectura pública, edición admin)
CREATE POLICY "Productos_lectura_publica" ON productos 
FOR SELECT USING (activo = true);

CREATE POLICY "Solo_admin_modifica_productos" ON productos 
FOR ALL USING (
  auth.email() = 'asselalan@gmail.com' OR
  auth.jwt() ->> 'role' = 'admin'
);

-- 3. Política para pedidos (solo propietario)
CREATE POLICY "Usuario_ve_sus_pedidos" ON pedidos 
FOR SELECT USING (usuario = auth.uid());

CREATE POLICY "Usuario_crea_sus_pedidos" ON pedidos 
FOR INSERT WITH CHECK (usuario = auth.uid());

-- 4. Política para admin (ve todos los pedidos)
CREATE POLICY "Admin_ve_todos_pedidos" ON pedidos 
FOR ALL USING (auth.email() = 'asselalan@gmail.com');
```

#### Paso 2: Crear Variables de Entorno Seguras

**Tiempo estimado:** 1 hora

**Crear archivo `.env.production` (NO versionado):**

```env
# Producción - NO subir a git
VITE_SUPABASE_URL=https://tu-proyecto.supabase.co
VITE_SUPABASE_ANON_KEY=tu_clave_anonima_real
VITE_MP_PUBLIC_KEY=tu_public_key_produccion
VITE_DOMAIN=https://entrepatitas.com

# Variables de desarrollo local (.env.local)
VITE_EMAIL_ADMIN=tu_email_admin
```

**Actualizar `.gitignore`:**
```gitignore
# Archivos de entorno
.env.production
.env.local
.env.staging

# Credenciales sensibles
*.pem
*.key
secrets/
```

#### Paso 3: Configurar Edge Function para Webhooks

**Tiempo estimado:** 3 horas

**Crear `supabase/functions/mp-webhook/index.ts`:**

```typescript
import { serve } from "https://deno.land/std@0.177.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type, x-signature',
}

serve(async (req) => {
  // Manejar CORS
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    // Verificar signature de MercadoPago
    const signature = req.headers.get('x-signature')
    const body = await req.text()
    
    if (!verifyMPSignature(body, signature)) {
      return new Response('Unauthorized', { status: 401 })
    }

    const payment = JSON.parse(body)
    
    // Actualizar estado del pago en Supabase
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? '',
    )

    const { error } = await supabase
      .from('pedidos')
      .update({
        mp_payment_id: payment.id,
        mp_status: payment.status,
        estado_pago: payment.status === 'approved' ? 'aprobado' : 'pendiente',
        mp_approved_date: payment.date_approved
      })
      .eq('mp_external_reference', payment.external_reference)

    if (error) throw error

    return new Response('OK', { 
      headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
    })

  } catch (error) {
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    })
  }
})

function verifyMPSignature(body: string, signature: string): boolean {
  // Implementar verificación de firma MP
  // Usar crypto para verificar HMAC-SHA256
  return true; // Simplificado para ejemplo
}
```

### FASE 2: BASE DE DATOS Y PERFORMANCE (Días 4-6)

#### Paso 4: Optimizar Base de Datos

**Tiempo estimado:** 4 horas

```sql
-- 1. Crear índices para consultas frecuentes
CREATE INDEX CONCURRENTLY idx_productos_categoria_activo 
ON productos(categoria, activo) WHERE activo = true;

CREATE INDEX CONCURRENTLY idx_productos_destacado 
ON productos(destacado, fecha_creacion DESC) WHERE destacado = true;

CREATE INDEX CONCURRENTLY idx_pedidos_usuario_fecha 
ON pedidos(usuario, fecha_creacion DESC);

CREATE INDEX CONCURRENTLY idx_pedidos_estado 
ON pedidos(estado, estado_pago);

-- 2. Función para actualizar stock automáticamente
CREATE OR REPLACE FUNCTION actualizar_stock_producto()
RETURNS TRIGGER AS $$
BEGIN
  UPDATE productos 
  SET stock = stock - (NEW.productos::json->0->>'cantidad')::integer,
      fecha_actualizacion = NOW()
  WHERE id = (NEW.productos::json->0->>'id')::uuid;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- 3. Trigger para actualizar stock en pedidos confirmados
CREATE TRIGGER trigger_actualizar_stock
  AFTER UPDATE OF estado_pago ON pedidos
  FOR EACH ROW
  WHEN (NEW.estado_pago = 'aprobado' AND OLD.estado_pago != 'aprobado')
  EXECUTE FUNCTION actualizar_stock_producto();

-- 4. Función para buscar productos
CREATE OR REPLACE FUNCTION buscar_productos(
  termino_busqueda text DEFAULT '',
  categoria_filtro text DEFAULT '',
  precio_min numeric DEFAULT 0,
  precio_max numeric DEFAULT 999999,
  limite integer DEFAULT 20,
  offset_param integer DEFAULT 0
)
RETURNS TABLE (
  id uuid,
  nombre text,
  descripcion text,
  categoria text,
  precio numeric,
  precio_descuento numeric,
  imagen_url text,
  stock integer,
  destacado boolean
) AS $$
BEGIN
  RETURN QUERY
  SELECT p.id, p.nombre, p.descripcion, p.categoria, p.precio, 
         p.precio_descuento, p.imagen_url, p.stock, p.destacado
  FROM productos p
  WHERE p.activo = true
    AND (termino_busqueda = '' OR 
         p.nombre ILIKE '%' || termino_busqueda || '%' OR
         p.descripcion ILIKE '%' || termino_busqueda || '%')
    AND (categoria_filtro = '' OR p.categoria = categoria_filtro)
    AND (COALESCE(p.precio_descuento, p.precio) >= precio_min)
    AND (COALESCE(p.precio_descuento, p.precio) <= precio_max)
  ORDER BY p.destacado DESC, p.fecha_creacion DESC
  LIMIT limite OFFSET offset_param;
END;
$$ LANGUAGE plpgsql;
```

#### Paso 5: Crear Tablas Faltantes

**Tiempo estimado:** 2 horas

```sql
-- 1. Tabla de favoritos
CREATE TABLE favoritos (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  usuario_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  producto_id UUID REFERENCES productos(id) ON DELETE CASCADE,
  fecha_creacion TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  
  UNIQUE(usuario_id, producto_id)
);

-- Habilitar RLS en favoritos
ALTER TABLE favoritos ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Usuario_gestiona_sus_favoritos" ON favoritos
FOR ALL USING (usuario_id = auth.uid());

-- 2. Tabla de variantes de producto
CREATE TABLE producto_variantes (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  producto_id UUID REFERENCES productos(id) ON DELETE CASCADE,
  color VARCHAR(50),
  talla VARCHAR(20),
  stock_variante INTEGER DEFAULT 0,
  precio_extra NUMERIC(10,2) DEFAULT 0,
  imagen_variante TEXT,
  sku_variante VARCHAR(100),
  
  fecha_creacion TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 3. Tabla de reviews (opcional)
CREATE TABLE producto_reviews (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  producto_id UUID REFERENCES productos(id) ON DELETE CASCADE,
  usuario_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  puntuacion INTEGER CHECK (puntuacion >= 1 AND puntuacion <= 5),
  comentario TEXT,
  fecha_creacion TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  
  UNIQUE(producto_id, usuario_id)
);

ALTER TABLE producto_reviews ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Reviews_lectura_publica" ON producto_reviews
FOR SELECT USING (true);

CREATE POLICY "Usuario_crea_su_review" ON producto_reviews
FOR INSERT WITH CHECK (usuario_id = auth.uid());
```

### FASE 3: FRONTEND OPTIMIZADO (Días 7-10)

#### Paso 6: Implementar Autenticación Robusta

**Tiempo estimado:** 4 horas

**Crear `src/hooks/useAuth.js`:**

```jsx
import { useState, useEffect, createContext, useContext } from 'react';
import { supabase } from '../libs/supabaseClient';

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [isAdmin, setIsAdmin] = useState(false);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Obtener sesión inicial
    supabase.auth.getSession().then(({ data: { session } }) => {
      setUser(session?.user ?? null);
      setIsAdmin(session?.user?.email === import.meta.env.VITE_EMAIL_ADMIN);
      setLoading(false);
    });

    // Escuchar cambios de auth
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        setUser(session?.user ?? null);
        setIsAdmin(session?.user?.email === import.meta.env.VITE_EMAIL_ADMIN);
        setLoading(false);

        // Opcional: Sincronizar perfil de usuario
        if (session?.user && event === 'SIGNED_IN') {
          await syncUserProfile(session.user);
        }
      }
    );

    return () => subscription.unsubscribe();
  }, []);

  const syncUserProfile = async (user) => {
    try {
      const { data, error } = await supabase
        .from('perfiles_usuario')
        .upsert({
          id: user.id,
          email: user.email,
          nombre: user.user_metadata?.nombre || '',
          ultima_conexion: new Date().toISOString()
        });
      
      if (error) console.error('Error syncing profile:', error);
    } catch (error) {
      console.error('Profile sync error:', error);
    }
  };

  const signIn = async (email, password) => {
    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password,
    });
    return { data, error };
  };

  const signUp = async (email, password, metadata = {}) => {
    const { data, error } = await supabase.auth.signUp({
      email,
      password,
      options: {
        data: metadata
      }
    });
    return { data, error };
  };

  const signOut = async () => {
    const { error } = await supabase.auth.signOut();
    return { error };
  };

  const resetPassword = async (email) => {
    const { error } = await supabase.auth.resetPasswordForEmail(email, {
      redirectTo: `${window.location.origin}/reset-password`
    });
    return { error };
  };

  const value = {
    user,
    isAdmin,
    loading,
    signIn,
    signUp,
    signOut,
    resetPassword
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth debe usarse dentro de AuthProvider');
  }
  return context;
};
```

#### Paso 7: Componente de Búsqueda Avanzada

**Tiempo estimado:** 3 horas

**Crear `src/components/SearchFilters.jsx`:**

```jsx
import React, { useState, useEffect } from 'react';
import { Form, Row, Col, Button, InputGroup } from 'react-bootstrap';
import { FaSearch, FaFilter } from 'react-icons/fa';

const SearchFilters = ({ onFiltersChange, categorias = [] }) => {
  const [filters, setFilters] = useState({
    busqueda: '',
    categoria: '',
    precioMin: '',
    precioMax: '',
    ordenarPor: 'nombre'
  });

  const [showAdvanced, setShowAdvanced] = useState(false);

  useEffect(() => {
    const delayedSearch = setTimeout(() => {
      onFiltersChange(filters);
    }, 500); // Debounce de 500ms

    return () => clearTimeout(delayedSearch);
  }, [filters, onFiltersChange]);

  const handleInputChange = (field, value) => {
    setFilters(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const limpiarFiltros = () => {
    setFilters({
      busqueda: '',
      categoria: '',
      precioMin: '',
      precioMax: '',
      ordenarPor: 'nombre'
    });
  };

  return (
    <div className="search-filters bg-light p-3 rounded mb-4">
      {/* Búsqueda principal */}
      <Row className="mb-3">
        <Col md={8}>
          <InputGroup>
            <Form.Control
              type="text"
              placeholder="Buscar productos..."
              value={filters.busqueda}
              onChange={(e) => handleInputChange('busqueda', e.target.value)}
            />
            <InputGroup.Text>
              <FaSearch />
            </InputGroup.Text>
          </InputGroup>
        </Col>
        <Col md={4}>
          <Button
            variant="outline-primary"
            onClick={() => setShowAdvanced(!showAdvanced)}
            className="w-100"
          >
            <FaFilter className="me-2" />
            Filtros {showAdvanced ? '▲' : '▼'}
          </Button>
        </Col>
      </Row>

      {/* Filtros avanzados */}
      {showAdvanced && (
        <Row>
          <Col md={3}>
            <Form.Group>
              <Form.Label>Categoría</Form.Label>
              <Form.Select
                value={filters.categoria}
                onChange={(e) => handleInputChange('categoria', e.target.value)}
              >
                <option value="">Todas las categorías</option>
                {categorias.map(cat => (
                  <option key={cat} value={cat}>{cat}</option>
                ))}
              </Form.Select>
            </Form.Group>
          </Col>
          <Col md={2}>
            <Form.Group>
              <Form.Label>Precio mín.</Form.Label>
              <Form.Control
                type="number"
                placeholder="0"
                value={filters.precioMin}
                onChange={(e) => handleInputChange('precioMin', e.target.value)}
              />
            </Form.Group>
          </Col>
          <Col md={2}>
            <Form.Group>
              <Form.Label>Precio máx.</Form.Label>
              <Form.Control
                type="number"
                placeholder="Sin límite"
                value={filters.precioMax}
                onChange={(e) => handleInputChange('precioMax', e.target.value)}
              />
            </Form.Group>
          </Col>
          <Col md={3}>
            <Form.Group>
              <Form.Label>Ordenar por</Form.Label>
              <Form.Select
                value={filters.ordenarPor}
                onChange={(e) => handleInputChange('ordenarPor', e.target.value)}
              >
                <option value="nombre">Nombre A-Z</option>
                <option value="precio_asc">Precio menor a mayor</option>
                <option value="precio_desc">Precio mayor a menor</option>
                <option value="fecha_desc">Más recientes</option>
                <option value="destacados">Destacados primero</option>
              </Form.Select>
            </Form.Group>
          </Col>
          <Col md={2} className="d-flex align-items-end">
            <Button
              variant="outline-secondary"
              onClick={limpiarFiltros}
              className="w-100"
            >
              Limpiar
            </Button>
          </Col>
        </Row>
      )}
    </div>
  );
};

export default SearchFilters;
```

#### Paso 8: Hook para Productos con Paginación

**Tiempo estimado:** 2 horas

**Crear `src/hooks/useProducts.js`:**

```jsx
import { useState, useEffect, useCallback } from 'react';
import { supabase } from '../libs/supabaseClient';

export const useProducts = (filters = {}, pageSize = 12) => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [hasMore, setHasMore] = useState(true);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalCount, setTotalCount] = useState(0);

  const loadProducts = useCallback(async (page = 1, append = false) => {
    try {
      setLoading(true);
      setError(null);

      const offset = (page - 1) * pageSize;
      
      let query = supabase
        .from('productos')
        .select('*', { count: 'exact' })
        .eq('activo', true)
        .range(offset, offset + pageSize - 1);

      // Aplicar filtros
      if (filters.busqueda) {
        query = query.or(`nombre.ilike.%${filters.busqueda}%,descripcion.ilike.%${filters.busqueda}%`);
      }

      if (filters.categoria) {
        query = query.eq('categoria', filters.categoria);
      }

      if (filters.precioMin) {
        query = query.gte('precio', parseFloat(filters.precioMin));
      }

      if (filters.precioMax) {
        query = query.lte('precio', parseFloat(filters.precioMax));
      }

      // Ordenamiento
      switch (filters.ordenarPor) {
        case 'precio_asc':
          query = query.order('precio', { ascending: true });
          break;
        case 'precio_desc':
          query = query.order('precio', { ascending: false });
          break;
        case 'fecha_desc':
          query = query.order('fecha_creacion', { ascending: false });
          break;
        case 'destacados':
          query = query.order('destacado', { ascending: false })
                      .order('fecha_creacion', { ascending: false });
          break;
        default:
          query = query.order('nombre', { ascending: true });
      }

      const { data, error, count } = await query;

      if (error) throw error;

      setTotalCount(count || 0);
      
      if (append) {
        setProducts(prev => [...prev, ...data]);
      } else {
        setProducts(data);
      }

      setHasMore(data.length === pageSize);
      setCurrentPage(page);

    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  }, [filters, pageSize]);

  // Cargar productos cuando cambien los filtros
  useEffect(() => {
    loadProducts(1, false);
  }, [loadProducts]);

  const loadMore = () => {
    if (!loading && hasMore) {
      loadProducts(currentPage + 1, true);
    }
  };

  const refresh = () => {
    loadProducts(1, false);
  };

  return {
    products,
    loading,
    error,
    hasMore,
    currentPage,
    totalCount,
    loadMore,
    refresh
  };
};
```

### FASE 4: DEPLOY Y HOSTING (Días 11-13)

#### Paso 9: Configurar Vercel para Producción

**Tiempo estimado:** 2 horas

**Crear `vercel.json`:**

```json
{
  "buildCommand": "npm run build",
  "outputDirectory": "dist",
  "framework": "vite",
  "env": {
    "VITE_SUPABASE_URL": "@supabase_url",
    "VITE_SUPABASE_ANON_KEY": "@supabase_anon_key",
    "VITE_MP_PUBLIC_KEY": "@mp_public_key",
    "VITE_EMAIL_ADMIN": "@email_admin"
  },
  "rewrites": [
    {
      "source": "/(.*)",
      "destination": "/index.html"
    }
  ],
  "headers": [
    {
      "source": "/(.*)\\.(js|css|png|jpg|jpeg|gif|ico|svg)",
      "headers": [
        {
          "key": "Cache-Control",
          "value": "public, max-age=31536000, immutable"
        }
      ]
    }
  ]
}
```

**Comandos de deploy:**

```bash
# 1. Instalar Vercel CLI
npm i -g vercel

# 2. Login en Vercel
vercel login

# 3. Deploy inicial
vercel --prod

# 4. Configurar variables de entorno en dashboard
# Ir a vercel.com → proyecto → Settings → Environment Variables
```

#### Paso 10: Configurar Dominio Personalizado

**Tiempo estimado:** 1 hora

**En Vercel Dashboard:**

1. **Domains** → Add Domain → `entrepatitas.com`
2. Configurar DNS en tu proveedor:
   ```
   Type: CNAME
   Name: www
   Value: cname.vercel-dns.com
   
   Type: A
   Name: @
   Value: 76.76.19.61
   ```

3. **SSL automático** se configura solo

#### Paso 11: Configurar Monitoring con Sentry

**Tiempo estimado:** 1 hora

```bash
# Instalar Sentry
npm install @sentry/react @sentry/tracing
```

**Configurar en `src/main.jsx`:**

```jsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import * as Sentry from "@sentry/react";
import { BrowserTracing } from "@sentry/tracing";
import App from './App.jsx';

// Configurar Sentry solo en producción
if (import.meta.env.PROD) {
  Sentry.init({
    dsn: "TU_SENTRY_DSN",
    integrations: [
      new BrowserTracing({
        tracingOrigins: ["localhost", "entrepatitas.com", /^\//],
      }),
    ],
    tracesSampleRate: 1.0,
    environment: import.meta.env.MODE,
  });
}

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
```

### FASE 5: TESTING Y OPTIMIZACIÓN (Días 14-15)

#### Paso 12: Setup de Testing

**Tiempo estimado:** 3 horas

```bash
# Instalar dependencias de testing
npm install --save-dev vitest @testing-library/react @testing-library/jest-dom
```

**Crear `src/tests/setup.js`:**

```javascript
import { expect, afterEach } from 'vitest';
import { cleanup } from '@testing-library/react';
import * as matchers from '@testing-library/jest-dom/matchers';

expect.extend(matchers);

afterEach(() => {
  cleanup();
});
```

**Tests críticos en `src/tests/App.test.jsx`:**

```jsx
import { describe, it, expect } from 'vitest';
import { render, screen } from '@testing-library/react';
import { BrowserRouter } from 'react-router-dom';
import App from '../App';

const AppWithRouter = () => (
  <BrowserRouter>
    <App />
  </BrowserRouter>
);

describe('App', () => {
  it('renderiza sin errores', () => {
    render(<AppWithRouter />);
    expect(screen.getByRole('main')).toBeInTheDocument();
  });

  it('muestra navbar correctamente', () => {
    render(<AppWithRouter />);
    expect(screen.getByRole('navigation')).toBeInTheDocument();
  });
});
```

#### Paso 13: Optimización de Performance

**Tiempo estimado:** 2 horas

**Crear `src/components/LazyImage.jsx`:**

```jsx
import React, { useState, useRef, useEffect } from 'react';

const LazyImage = ({ 
  src, 
  alt, 
  placeholder = '/placeholder.jpg',
  className = '',
  ...props 
}) => {
  const [imageSrc, setImageSrc] = useState(placeholder);
  const [imageRef, setImageRef] = useState();

  useEffect(() => {
    let observer;
    
    if (imageRef && imageSrc === placeholder) {
      observer = new IntersectionObserver(
        entries => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              setImageSrc(src);
              observer.unobserve(imageRef);
            }
          });
        },
        { threshold: 0.1 }
      );
      observer.observe(imageRef);
    }
    
    return () => {
      if (observer && observer.unobserve) {
        observer.unobserve(imageRef);
      }
    };
  }, [imageRef, imageSrc, placeholder, src]);

  return (
    <img
      {...props}
      ref={setImageRef}
      src={imageSrc}
      alt={alt}
      className={`${className} ${imageSrc === placeholder ? 'loading' : 'loaded'}`}
      loading="lazy"
    />
  );
};

export default LazyImage;
```

**Optimizar `vite.config.js`:**

```javascript
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  base: '/',
  build: {
    rollupOptions: {
      output: {
        manualChunks: {
          vendor: ['react', 'react-dom'],
          router: ['react-router-dom'],
          ui: ['react-bootstrap', 'bootstrap'],
          supabase: ['@supabase/supabase-js']
        }
      }
    },
    chunkSizeWarningLimit: 1000
  },
  server: {
    host: true,
    port: 3000
  }
})
```

#### Paso 14: SEO y Meta Tags

**Tiempo estimado:** 2 horas

```bash
# Instalar react-helmet-async
npm install react-helmet-async
```

**Crear `src/components/SEO.jsx`:**

```jsx
import React from 'react';
import { Helmet } from 'react-helmet-async';

const SEO = ({ 
  title = 'Entre Patitas - Tienda Online de Productos para Mascotas',
  description = 'Encuentra los mejores productos para tu mascota. Comederos, juguetes, collares y más. Envío gratis en compras superiores a $5000.',
  keywords = 'mascotas, perros, gatos, comederos, juguetes, collares, productos para mascotas',
  image = '/og-image.jpg',
  url = window.location.href,
  type = 'website'
}) => {
  const siteUrl = 'https://entrepatitas.com';
  const fullImageUrl = image.startsWith('http') ? image : `${siteUrl}${image}`;

  return (
    <Helmet>
      {/* Meta tags básicos */}
      <title>{title}</title>
      <meta name="description" content={description} />
      <meta name="keywords" content={keywords} />
      <link rel="canonical" href={url} />

      {/* Open Graph */}
      <meta property="og:title" content={title} />
      <meta property="og:description" content={description} />
      <meta property="og:image" content={fullImageUrl} />
      <meta property="og:url" content={url} />
      <meta property="og:type" content={type} />
      <meta property="og:site_name" content="Entre Patitas" />
      <meta property="og:locale" content="es_AR" />

      {/* Twitter Cards */}
      <meta name="twitter:card" content="summary_large_image" />
      <meta name="twitter:title" content={title} />
      <meta name="twitter:description" content={description} />
      <meta name="twitter:image" content={fullImageUrl} />

      {/* Structured Data */}
      <script type="application/ld+json">
        {JSON.stringify({
          "@context": "https://schema.org",
          "@type": "Store",
          "name": "Entre Patitas",
          "description": description,
          "url": siteUrl,
          "logo": `${siteUrl}/logo.png`,
          "contactPoint": {
            "@type": "ContactPoint",
            "telephone": "+54-11-1234-5678",
            "contactType": "customer service",
            "availableLanguage": "Spanish"
          },
          "address": {
            "@type": "PostalAddress",
            "addressCountry": "AR",
            "addressLocality": "Buenos Aires"
          }
        })}
      </script>
    </Helmet>
  );
};

export default SEO;
```

#### Paso 15: Scripts de Automatización

**Tiempo estimado:** 1 hora

**Crear `scripts/deploy.sh`:**

```bash
#!/bin/bash

# Script de deploy automatizado
echo "🚀 Iniciando deploy de EntrePatitas..."

# 1. Verificar que estamos en main
BRANCH=$(git branch --show-current)
if [ "$BRANCH" != "main" ]; then
  echo "❌ Error: Debes estar en la rama main para hacer deploy"
  exit 1
fi

# 2. Verificar que no hay cambios sin commitear
if ! git diff-index --quiet HEAD --; then
  echo "❌ Error: Hay cambios sin commitear"
  exit 1
fi

# 3. Ejecutar tests
echo "🧪 Ejecutando tests..."
npm run test
if [ $? -ne 0 ]; then
  echo "❌ Error: Los tests fallaron"
  exit 1
fi

# 4. Build del proyecto
echo "🏗️ Construyendo proyecto..."
npm run build
if [ $? -ne 0 ]; then
  echo "❌ Error: Build falló"
  exit 1
fi

# 5. Deploy a Vercel
echo "🌐 Desplegando a Vercel..."
vercel --prod
if [ $? -ne 0 ]; then
  echo "❌ Error: Deploy falló"
  exit 1
fi

echo "✅ Deploy completado exitosamente!"
echo "🌐 Sitio disponible en: https://entrepatitas.com"
```

**Crear `package.json` scripts adicionales:**

```json
{
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview",
    "test": "vitest",
    "test:ui": "vitest --ui",
    "test:coverage": "vitest --coverage",
    "lint": "eslint src --ext .js,.jsx,.ts,.tsx",
    "lint:fix": "eslint src --ext .js,.jsx,.ts,.tsx --fix",
    "deploy": "bash scripts/deploy.sh",
    "analyze": "npx vite-bundle-analyzer",
    "db:seed": "node scripts/seedDatabase.js"
  }
}
```

---

## 5. Scripts y Código de Implementación

### Script de Migración de Base de Datos

**Crear `scripts/migrate.sql`:**

```sql
-- =================================
-- MIGRACIÓN COMPLETA DE ENTREPATITAS
-- =================================

-- 1. HABILITAR EXTENSIONES NECESARIAS
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pg_trgm"; -- Para búsqueda de texto

-- 2. CREAR TABLAS FALTANTES

-- Tabla de perfiles de usuario
CREATE TABLE IF NOT EXISTS perfiles_usuario (
  id UUID REFERENCES auth.users(id) PRIMARY KEY,
  nombre VARCHAR(100),
  apellido VARCHAR(100),
  telefono VARCHAR(20),
  fecha_nacimiento DATE,
  avatar_url TEXT,
  direccion_predeterminada JSONB,
  preferencias JSONB DEFAULT '{}',
  fecha_creacion TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  ultima_conexion TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Tabla de direcciones
CREATE TABLE direcciones (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  usuario_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  alias VARCHAR(50) NOT NULL, -- 'Casa', 'Trabajo', etc.
  calle VARCHAR(200) NOT NULL,
  numero VARCHAR(10),
  piso VARCHAR(10),
  departamento VARCHAR(10),
  ciudad VARCHAR(100) NOT NULL,
  provincia VARCHAR(100) NOT NULL,
  codigo_postal VARCHAR(10) NOT NULL,
  referencias TEXT,
  es_predeterminada BOOLEAN DEFAULT FALSE,
  fecha_creacion TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  
  UNIQUE(usuario_id, alias)
);

-- Tabla de categorías
CREATE TABLE categorias (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  nombre VARCHAR(100) UNIQUE NOT NULL,
  descripcion TEXT,
  imagen_url TEXT,
  activa BOOLEAN DEFAULT TRUE,
  orden INTEGER DEFAULT 0
);

-- Insertar categorías base
INSERT INTO categorias (nombre, descripcion, orden) VALUES
('comederos', 'Comederos y bebederos para mascotas', 1),
('juguetes', 'Juguetes y entretenimiento', 2),
('accesorios', 'Collares, correas y accesorios', 3),
('higiene', 'Productos de higiene y cuidado', 4),
('salud', 'Vitaminas y suplementos', 5),
('camas', 'Camas y descanso', 6)
ON CONFLICT (nombre) DO NOTHING;

-- Actualizar productos para usar categorías
UPDATE productos SET categoria = 'comederos' WHERE categoria IN ('comedero', 'Comederos');
UPDATE productos SET categoria = 'accesorios' WHERE categoria IN ('accesorio', 'Accesorios');

-- 3. CREAR ÍNDICES DE PERFORMANCE
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_productos_busqueda 
ON productos USING gin(to_tsvector('spanish', nombre || ' ' || COALESCE(descripcion, '')));

CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_productos_categoria_precio 
ON productos(categoria, precio) WHERE activo = true;

CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_pedidos_usuario_estado 
ON pedidos(usuario, estado_pago);

CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_pedidos_fecha 
ON pedidos(fecha_creacion DESC);

-- 4. FUNCIONES OPTIMIZADAS

-- Función de búsqueda mejorada con full-text search
CREATE OR REPLACE FUNCTION buscar_productos_fulltext(
  termino_busqueda text DEFAULT '',
  categoria_filtro text DEFAULT '',
  precio_min numeric DEFAULT 0,
  precio_max numeric DEFAULT 999999,
  solo_con_stock boolean DEFAULT false,
  limite integer DEFAULT 20,
  offset_param integer DEFAULT 0
)
RETURNS TABLE (
  id uuid,
  nombre text,
  descripcion text,
  categoria text,
  precio numeric,
  precio_descuento numeric,
  imagen_url text,
  stock integer,
  destacado boolean,
  relevancia real
) AS $
BEGIN
  RETURN QUERY
  SELECT 
    p.id, p.nombre, p.descripcion, p.categoria, p.precio, 
    p.precio_descuento, p.imagen_url, p.stock, p.destacado,
    CASE 
      WHEN termino_busqueda = '' THEN 1.0
      ELSE ts_rank(to_tsvector('spanish', p.nombre || ' ' || COALESCE(p.descripcion, '')), 
                   plainto_tsquery('spanish', termino_busqueda))
    END as relevancia
  FROM productos p
  WHERE p.activo = true
    AND (NOT solo_con_stock OR p.stock > 0)
    AND (categoria_filtro = '' OR p.categoria = categoria_filtro)
    AND (COALESCE(p.precio_descuento, p.precio) >= precio_min)
    AND (COALESCE(p.precio_descuento, p.precio) <= precio_max)
    AND (termino_busqueda = '' OR 
         to_tsvector('spanish', p.nombre || ' ' || COALESCE(p.descripcion, '')) @@ 
         plainto_tsquery('spanish', termino_busqueda))
  ORDER BY 
    CASE WHEN termino_busqueda = '' THEN 0 ELSE 1 END,
    relevancia DESC,
    p.destacado DESC,
    p.fecha_creacion DESC
  LIMIT limite OFFSET offset_param;
END;
$ LANGUAGE plpgsql;

-- Función para obtener estadísticas del admin
CREATE OR REPLACE FUNCTION obtener_estadisticas_admin()
RETURNS jsonb AS $
DECLARE
  stats jsonb;
BEGIN
  SELECT jsonb_build_object(
    'total_productos', (SELECT COUNT(*) FROM productos WHERE activo = true),
    'productos_sin_stock', (SELECT COUNT(*) FROM productos WHERE activo = true AND stock <= 0),
    'total_pedidos', (SELECT COUNT(*) FROM pedidos),
    'pedidos_pendientes', (SELECT COUNT(*) FROM pedidos WHERE estado_pago = 'pendiente'),
    'pedidos_hoy', (SELECT COUNT(*) FROM pedidos WHERE DATE(fecha_creacion) = CURRENT_DATE),
    'ventas_mes', (SELECT COALESCE(SUM(total), 0) FROM pedidos 
                   WHERE estado_pago = 'aprobado' 
                   AND DATE_TRUNC('month', fecha_creacion) = DATE_TRUNC('month', CURRENT_DATE)),
    'categoria_mas_vendida', (
      SELECT jsonb_build_object('categoria', categoria, 'cantidad', total_vendido)
      FROM (
        SELECT p.categoria, SUM(cantidad) as total_vendido
        FROM pedidos ped, jsonb_array_elements(ped.productos) as item
        JOIN productos p ON p.id = (item->>'id')::uuid
        WHERE ped.estado_pago = 'aprobado'
        GROUP BY p.categoria
        ORDER BY total_vendido DESC
        LIMIT 1
      ) as cat_stats
    )
  ) INTO stats;
  
  RETURN stats;
END;
$ LANGUAGE plpgsql;

-- 5. TRIGGERS PARA AUTOMATIZACIÓN

-- Trigger para actualizar fecha de modificación
CREATE OR REPLACE FUNCTION trigger_actualizar_fecha()
RETURNS TRIGGER AS $
BEGIN
  NEW.fecha_actualizacion = NOW();
  RETURN NEW;
END;
$ LANGUAGE plpgsql;

CREATE TRIGGER productos_actualizar_fecha
  BEFORE UPDATE ON productos
  FOR EACH ROW EXECUTE FUNCTION trigger_actualizar_fecha();

-- Trigger para mantener una sola dirección predeterminada
CREATE OR REPLACE FUNCTION trigger_direccion_predeterminada()
RETURNS TRIGGER AS $
BEGIN
  IF NEW.es_predeterminada = true THEN
    UPDATE direcciones 
    SET es_predeterminada = false 
    WHERE usuario_id = NEW.usuario_id AND id != NEW.id;
  END IF;
  RETURN NEW;
END;
$ LANGUAGE plpgsql;

CREATE TRIGGER direcciones_predeterminada
  AFTER INSERT OR UPDATE ON direcciones
  FOR EACH ROW 
  WHEN (NEW.es_predeterminada = true)
  EXECUTE FUNCTION trigger_direccion_predeterminada();

-- 6. CONFIGURAR RLS PARA TODAS LAS TABLAS

-- Perfiles de usuario
ALTER TABLE perfiles_usuario ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Usuario_ve_su_perfil" ON perfiles_usuario
  FOR ALL USING (id = auth.uid());

-- Direcciones
ALTER TABLE direcciones ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Usuario_gestiona_sus_direcciones" ON direcciones
  FOR ALL USING (usuario_id = auth.uid());

-- Favoritos (si existe)
CREATE POLICY "Usuario_gestiona_favoritos" ON favoritos
  FOR ALL USING (usuario_id = auth.uid());

-- Categorías (lectura pública)
ALTER TABLE categorias ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Categorias_lectura_publica" ON categorias
  FOR SELECT USING (activa = true);
CREATE POLICY "Admin_gestiona_categorias" ON categorias
  FOR ALL USING (auth.email() = 'asselalan@gmail.com');

-- 7. POLÍTICAS ADMIN MEJORADAS
CREATE POLICY "Admin_ve_todo_productos" ON productos
  FOR ALL USING (
    auth.email() = 'asselalan@gmail.com' OR
    auth.jwt() ->> 'role' = 'admin'
  );

CREATE POLICY "Admin_ve_todos_pedidos" ON pedidos
  FOR ALL USING (
    auth.email() = 'asselalan@gmail.com' OR
    auth.jwt() ->> 'role' = 'admin'
  );

-- 8. CREAR VISTAS ÚTILES

-- Vista de productos con información calculada
CREATE OR REPLACE VIEW v_productos_completos AS
SELECT 
  p.*,
  CASE 
    WHEN p.precio_descuento IS NOT NULL AND p.precio_descuento < p.precio 
    THEN ROUND(((p.precio - p.precio_descuento) / p.precio * 100))
    ELSE 0 
  END as porcentaje_descuento,
  COALESCE(p.precio_descuento, p.precio) as precio_final,
  CASE 
    WHEN p.stock <= 0 THEN 'sin_stock'
    WHEN p.stock <= 5 THEN 'stock_bajo'
    ELSE 'disponible'
  END as estado_stock
FROM productos p;

-- Vista de resumen de pedidos
CREATE OR REPLACE VIEW v_resumen_pedidos AS
SELECT 
  p.*,
  jsonb_array_length(p.productos) as cantidad_items,
  CASE 
    WHEN p.estado_pago = 'aprobado' THEN 'Pagado'
    WHEN p.estado_pago = 'pendiente' THEN 'Pendiente'
    WHEN p.estado_pago = 'rechazado' THEN 'Rechazado'
    ELSE 'Desconocido'
  END as estado_legible,
  EXTRACT(EPOCH FROM (NOW() - p.fecha_creacion))/3600 as horas_desde_creacion
FROM pedidos p;

-- 9. DATOS DE PRUEBA (OPCIONAL PARA DESARROLLO)
/*
INSERT INTO productos (nombre, descripcion, categoria, precio, stock, imagen_url, destacado) VALUES
('Comedero Slow Feed Grande', 'Comedero antivoracidad para perros grandes, ayuda a mejorar la digestión', 'comederos', 3500.00, 15, 'https://placehold.co/400x400/2563eb/ffffff?text=Comedero+Slow', true),
('Pelota de Goma Natural', 'Pelota 100% goma natural, resistente a mordidas', 'juguetes', 850.00, 25, 'https://placehold.co/400x400/059669/ffffff?text=Pelota+Goma', false),
('Collar LED Recargable', 'Collar con luces LED recargables, ideal para paseos nocturnos', 'accesorios', 2200.00, 8, 'https://placehold.co/400x400/dc2626/ffffff?text=Collar+LED', true)
ON CONFLICT DO NOTHING;
*/

COMMIT;
```

### Script de Seeders para Testing

**Crear `scripts/seedDatabase.js`:**

```javascript
import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabase = createClient(
  process.env.VITE_SUPABASE_URL,
  process.env.VITE_SUPABASE_SERVICE_KEY // Necesitas la service key para este script
);

const productos = [
  {
    nombre: 'Comedero Antideslizante Premium',
    descripcion: 'Comedero de acero inoxidable con base antideslizante. Perfecto para perros de tamaño mediano y grande.',
    categoria: 'comederos',
    precio: 2800.00,
    stock: 12,
    imagen_url: 'https://images.unsplash.com/photo-1583337130417-3346a1be7dee?w=400',
    destacado: true,
    sku: 'COM-PREM-001',
    peso: 0.5,
    dimensiones: { largo: 25, ancho: 25, alto: 8 }
  },
  {
    nombre: 'Juguete Interactivo Kong Classic',
    descripcion: 'Juguete resistente para perros, ideal para rellenar con premios. Estimula mentalmente a tu mascota.',
    categoria: 'juguetes',
    precio: 1650.00,
    precio_descuento: 1400.00,
    stock: 20,
    imagen_url: 'https://images.unsplash.com/photo-1601758228041-f3b2795255f1?w=400',
    destacado: false,
    sku: 'JUG-KONG-001',
    peso: 0.3
  },
  {
    nombre: 'Collar de Cuero Artesanal',
    descripcion: 'Collar de cuero genuino hecho a mano. Disponible en varios colores y tamaños.',
    categoria: 'accesorios',
    precio: 3200.00,
    stock: 8,
    imagen_url: 'https://images.unsplash.com/photo-1601758175000-9b26d15c711e?w=400',
    destacado: true,
    sku: 'ACC-COLL-001',
    peso: 0.2
  },
  {
    nombre: 'Shampoo Hipoalergénico',
    descripcion: 'Shampoo suave para pieles sensibles. Sin parabenos ni sulfatos. 500ml.',
    categoria: 'higiene',
    precio: 1890.00,
    stock: 15,
    imagen_url: 'https://images.unsplash.com/photo-1556909114-f6e7ad7d3136?w=400',
    destacado: false,
    sku: 'HIG-SHAM-001',
    peso: 0.6
  },
  {
    nombre: 'Cama Ortopédica Memory Foam',
    descripcion: 'Cama con espuma viscoelástica para el descanso perfecto. Funda lavable.',
    categoria: 'camas',
    precio: 8500.00,
    precio_descuento: 7200.00,
    stock: 5,
    imagen_url: 'https://images.unsplash.com/photo-1583512603806-077998240c7a?w=400',
    destacado: true,
    sku: 'CAM-ORTO-001',
    peso: 2.5,
    dimensiones: { largo: 80, ancho: 60, alto: 15 }
  }
];

async function seedDatabase() {
  try {
    console.log('🌱 Iniciando seeder de base de datos...');

    // Limpiar productos existentes (solo en desarrollo)
    if (process.env.NODE_ENV === 'development') {
      await supabase.from('productos').delete().neq('id', '');
      console.log('🧹 Productos anteriores eliminados');
    }

    // Insertar productos
    const { data, error } = await supabase
      .from('productos')
      .insert(productos);

    if (error) throw error;

    console.log(`✅ ${productos.length} productos insertados exitosamente`);

    // Crear usuario de prueba
    const { data: authData, error: authError } = await supabase.auth.admin.createUser({
      email: 'test@example.com',
      password: 'testpassword123',
      email_confirm: true,
      user_metadata: {
        nombre: 'Usuario',
        apellido: 'Prueba'
      }
    });

    if (authError) {
      console.log('ℹ️ Usuario de prueba ya existe o error:', authError.message);
    } else {
      console.log('👤 Usuario de prueba creado');
    }

    console.log('🎉 Seeder completado exitosamente');

  } catch (error) {
    console.error('❌ Error en seeder:', error);
    process.exit(1);
  }
}

// Ejecutar si se llama directamente
if (import.meta.url === `file://${process.argv[1]}`) {
  seedDatabase();
}

export { seedDatabase };
```

---

## 6. Costos y Timeline

### Timeline Detallado

| Fase | Días | Tareas Principales | Responsable |
|------|------|-------------------|-------------|
| **Fase 1: Seguridad** | 1-3 | RLS, Variables entorno, Webhooks | Dev Backend |
| **Fase 2: Base Datos** | 4-6 | Índices, Triggers, Migraciones | Dev Backend |
| **Fase 3: Frontend** | 7-10 | Auth, Búsqueda, Performance | Dev Frontend |
| **Fase 4: Deploy** | 11-13 | Vercel, Dominio, Monitoring | DevOps |
| **Fase 5: Testing** | 14-15 | Tests, Optimización, SEO | QA/Dev |

### Costos Mensuales Estimados

#### Infraestructura
- **Vercel Pro**: $20/mes (opcional, gratis hasta cierto límite)
- **Supabase Pro**: $25/mes (recomendado para producción)
- **Dominio**: $1.25/mes (promedio $15/año)

#### Servicios
- **Sentry** (monitoreo): $26/mes (plan Team)
- **Analytics**: $0 (Google Analytics gratuito)
- **CDN**: $0 (incluido en Vercel)

#### Pagos
- **MercadoPago**: 2.9% + $4 por transacción aprobada
- **Sin costos fijos mensuales**

#### TOTAL MENSUAL
- **Mínimo**: $52.25/mes
- **Recomendado**: $72.25/mes
- **+ comisiones por venta**

### ROI y Break-even

Para un ticket promedio de $3000:
- Comisión MP: ~$91 por venta
- Costos fijos: ~$72/mes
- **Break-even**: 1 venta por mes
- **Rentabilidad**: Excelente desde la segunda venta

---

## 7. Checklist Final

### Pre-Deploy Checklist

#### Seguridad ✅
- [ ] RLS habilitado en todas las tablas
- [ ] Políticas de acceso configuradas
- [ ] Variables de entorno seguras
- [ ] Credenciales no expuestas en código
- [ ] HTTPS forzado
- [ ] Headers de seguridad configurados

#### Base de Datos ✅
- [ ] Índices de performance creados
- [ ] Triggers funcionales
- [ ] Backup automático configurado
- [ ] Validaciones de esquema
- [ ] Datos de prueba cargados

#### Frontend ✅
- [ ] Autenticación robusta
- [ ] Manejo de errores global
- [ ] Loading states en todos los componentes
- [ ] Responsive design verificado
- [ ] Performance > 90 en Lighthouse
- [ ] SEO básico implementado

#### Funcionalidades ✅
- [ ] Carrito funcional
- [ ] Proceso de checkout completo
- [ ] Pagos con MercadoPago funcionando
- [ ] Webhooks de pago configurados
- [ ] Panel admin funcional
- [ ] Gestión de productos
- [ ] Gestión de pedidos

#### Deploy ✅
- [ ] Build sin errores
- [ ] Tests pasando
- [ ] Dominio configurado
- [ ] SSL activo
- [ ] Variables de entorno en producción
- [ ] Monitoring configurado

### Post-Deploy Checklist

#### Testing en Producción
- [ ] Registro de usuario funcional
- [ ] Login/logout funcionando
- [ ] Catálogo de productos carga correctamente
- [ ] Carrito mantiene productos
- [ ] Proceso de pago completo
- [ ] Webhooks de MercadoPago funcionando
- [ ] Panel admin accesible
- [ ] Emails de confirmación (si aplica)

#### Monitoring
- [ ] Errores siendo capturados por Sentry
- [ ] Analytics configurado
- [ ] Performance monitoreado
- [ ] Uptime verificado

#### Marketing
- [ ] Meta tags en redes sociales
- [ ] Google Search Console configurado
- [ ] Sitemap enviado a Google
- [ ] Robots.txt configurado

---

## 8. Contactos y Recursos

### Documentación Técnica
- **Supabase**: https://supabase.com/docs
- **Vercel**: https://vercel.com/docs
- **MercadoPago**: https://www.mercadopago.com.ar/developers
- **React**: https://react.dev

### Soporte y Comunidad
- **Stack Overflow**: Para dudas técnicas específicas
- **Discord Supabase**: Soporte de la comunidad
- **GitHub Issues**: Para problemas con dependencias

### Herramientas de Desarrollo
- **VS Code**: Editor recomendado
- **React DevTools**: Para debugging
- **Supabase Studio**: Para administrar BD
- **Vercel Dashboard**: Para monitorear deploy

---

## 📞 Próximos Pasos

1. **Revisar y aprobar** esta guía
2. **Configurar entorno** de desarrollo seguro
3. **Implementar Fase 1** (seguridad crítica)
4. **Testing iterativo** en cada fase
5. **Deploy gradual** con rollback preparado

---

**¿Necesitas que implemente alguna sección específica de esta guía?**

**¿Tienes dudas sobre algún paso técnico?**

**¿Quieres que genere algún código adicional?**

---

*Guía creada para EntrePatitas - Ecommerce de Productos para Mascotas*
*Versión 1.0 - Fecha: Agosto 2025*